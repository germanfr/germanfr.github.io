(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (root, smoothScroll) {
  'use strict';

  // Support RequireJS and CommonJS/NodeJS module formats.
  // Attach smoothScroll to the `window` when executed as a <script>.

  // RequireJS
  if (typeof define === 'function' && define.amd) {
    define(smoothScroll);

  // CommonJS
  } else if (typeof exports === 'object' && typeof module === 'object') {
    module.exports = smoothScroll();

  } else {
    root.smoothScroll = smoothScroll();
  }

})(this, function(){
'use strict';

// Do not initialize smoothScroll when running server side, handle it in client:
if (typeof window !== 'object') return;

// We do not want this script to be applied in browsers that do not support those
// That means no smoothscroll on IE9 and below.
if(document.querySelectorAll === void 0 || window.pageYOffset === void 0 || history.pushState === void 0) { return; }

// Get the top position of an element in the document
var getTop = function(element) {
    // return value of html.getBoundingClientRect().top ... IE : 0, other browsers : -pageYOffset
    if(element.nodeName === 'HTML') return -window.pageYOffset
    return element.getBoundingClientRect().top + window.pageYOffset;
}
// ease in out function thanks to:
// http://blog.greweb.fr/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/
var easeInOutCubic = function (t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }

// calculate the scroll position we should be in
// given the start and end point of the scroll
// the time elapsed from the beginning of the scroll
// and the total duration of the scroll (default 500ms)
var position = function(start, end, elapsed, duration) {
    if (elapsed > duration) return end;
    return start + (end - start) * easeInOutCubic(elapsed / duration); // <-- you can change the easing funtion there
    // return start + (end - start) * (elapsed / duration); // <-- this would give a linear scroll
}

// we use requestAnimationFrame to be called by the browser before every repaint
// if the first argument is an element then scroll to the top of this element
// if the first argument is numeric then scroll to this location
// if the callback exist, it is called when the scrolling is finished
// if context is set then scroll that element, else scroll window 
var smoothScroll = function(el, duration, callback, context){
    duration = duration || 500;
    context = context || window;
    var start = window.pageYOffset;

    if (typeof el === 'number') {
      var end = parseInt(el);
    } else {
      var end = getTop(el);
    }

    var clock = Date.now();
    var requestAnimationFrame = window.requestAnimationFrame ||
        window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||
        function(fn){window.setTimeout(fn, 15);};

    var step = function(){
        var elapsed = Date.now() - clock;
        if (context !== window) {
        	context.scrollTop = position(start, end, elapsed, duration);
        }
        else {
        	window.scroll(0, position(start, end, elapsed, duration));
        }

        if (elapsed > duration) {
            if (typeof callback === 'function') {
                callback(el);
            }
        } else {
            requestAnimationFrame(step);
        }
    }
    step();
}

var linkHandler = function(ev) {
    ev.preventDefault();

    if (location.hash !== this.hash) window.history.pushState(null, null, this.hash)
    // using the history api to solve issue #1 - back doesn't work
    // most browser don't update :target when the history api is used:
    // THIS IS A BUG FROM THE BROWSERS.
    // change the scrolling duration in this call
    smoothScroll(document.getElementById(this.hash.substring(1)), 500, function(el) {
        location.replace('#' + el.id)
        // this will cause the :target to be activated.
    });
}

// We look for all the internal links in the documents and attach the smoothscroll function
document.addEventListener("DOMContentLoaded", function () {
    var internal = document.querySelectorAll('a[href^="#"]:not([href="#"])'), a;
    for(var i=internal.length; a=internal[--i];){
        a.addEventListener("click", linkHandler, false);
    }
});

// return smoothscroll API
return smoothScroll;

});

},{}],2:[function(require,module,exports){
(function() { 'use strict'

	require('smoothscroll');

	window.addEventListener('DOMContentLoaded', function () {
		set_emails();
		adjust_footer();
	});

	function adjust_footer() {
		var footer = document.getElementById('footer');
		var wrapper = footer.parentElement;
		wrapper.style.paddingBottom = footer.offsetHeight + 'px';
		footer.classList.add('floating-footer');
	}

	function set_emails() {
		var ms = document.getElementsByClassName('liam');
		for(var i = 0, len = ms.length; i < len; i++) {
			ms[i].addEventListener('mouseover', show_mail_link);
			ms[i].addEventListener('mouseout', hide_mail_link);
		}
	}

	function show_mail_link() {
		var mailto = '\x6Dai\x6C\x74o\x3A';
		var mail = this.href.substr(7, this.href.length-1);
		this.href = mailto + unobfuscate_mail(mail);
	}

	function hide_mail_link() {
		var mailto = '\x6Dai\x6C\x74o\x3A';
		var mail = this.href.substr(7, this.href.length-1);
		this.href = mailto + obfuscate_mail(mail);
	}

	// Obfuscate email in format name@whatever.blah
	function obfuscate_mail(mail) {
		var raw = mail.split('\u0040');
		var name = raw[0], obs = '';
		var i = 0, j = name.length-1;
		while(i < j) {
			obs += name[i] + name[j];
			i++; j--;
		}
		if(i === j)
			obs += name[i];
		return  obs + '\u0040' + raw[1];
	}

	// Unobfuscate email in format hhdashjdkanwo@whatever.blah
	function unobfuscate_mail(mail) {
		var raw = mail.split('\u0040');
		var obs = raw[0], name = new Array(obs.length);
		var i = 0, j = obs.length-1;
		for(var count = 0; count < obs.length; count++) {
			if(count % 2 === 0) {
				name[i] = obs[count];
				i++;
			} else {
				name[j] = obs[count];
				j--;
			}
		}
		return  name.join('') + '\u0040' + raw[1];
	}

 })();

},{"smoothscroll":1}]},{},[2]);
